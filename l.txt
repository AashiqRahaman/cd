%{
    /* Section 1: Definitions and C Code */
    // Includes, macro definitions, global variables, and helper functions
    // These are copied verbatim to the generated C file (lex.yy.c)

    #include <stdio.h>
    // Often includes the header generated by yacc/bison for token definitions
    // #include "y.tab.h" // If used with yacc/bison

    int line_num = 1; // Example: keep track of line numbers
%}

/* Section 2: Lexical Rules (Regular Expressions and Actions) */
// Patterns (regular expressions) matched with corresponding C actions
// When a pattern matches, the action is executed.
// yylval is used to pass semantic values to the parser.

%%
[0-9]+          { /* Action for numbers */
                    // Example: yylval.ival = atoi(yytext); return NUMBER;
                  }
[a-zA-Z_][a-zA-Z0-9_]* { /* Action for identifiers */
                           // Example: strcpy(yylval.sval, yytext); return ID;
                       }
"int"           { /* Action for keyword 'int' */
                    // Example: return INT_KEYWORD;
                  }
[ \t]+          { /* Ignore whitespace */ }
\n              { line_num++; /* Increment line number for newline */ }
.               { /* Action for any other character (error handling) */
                    // Example: printf("Lexical error: Unexpected character '%s' at line %d\n", yytext, line_num);
                    // return yytext[0]; // Return the character itself as a token
                  }

%%

/* Section 3: User Subroutines (Auxiliary C Code) */
// Any additional C functions needed by the lexer, such as yywrap()
// These are also copied verbatim to the generated C file.

int yywrap() {
    // This function is called by flex when it reaches the end of its input.
    // Return 1 to indicate no more input.
    // Return 0 if there is more input (e.g., from another file).
    return 1;
}

// int main() {
//     // For standalone lexer testing (without yacc/bison)
//     // yylex(); // Call the lexer function
//     // return 0;
// }